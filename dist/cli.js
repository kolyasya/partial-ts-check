#!/usr/bin/env node
import L from"path";import m from"fs";import{createRequire as P}from"module";var b="ts-whitelist.js",j="ts-blacklist.js",N="tsconfig.json",S=process.cwd(),W=P(L.join(S,"package.json"));function B(){let r=L.join(S,"package.json"),t=m.readFileSync(r,"utf8");return JSON.parse(t)}function h(...r){return L.join(S,...r)}function E(r){let t=h(r);if(!m.existsSync(t))return console.log(`\u2139\uFE0F  List file not found: ${r} (will be ignored)`),[];if(t.endsWith(".js")||t.endsWith(".cjs")){let s=W(t);return s.default||s}let i=m.readFileSync(t,"utf8");try{return JSON.parse(i)}catch{return i.split(/\r?\n/).map(s=>s.trim()).filter(Boolean)}}function w(){let t=B()["partial-ts-check"]||{};return{whiteListPath:t.whitelist||t.whiteList||b,blackListPath:t.blacklist||t.blackList||j,printFilesList:t.printFilesList??!0,tsconfig:t.tsconfig||N}}import{execSync as C}from"child_process";import A from"fs";function F(r){let t=h(r);A.existsSync(t)||(console.error(`\u274C TypeScript config file not found: ${r}`),process.exit(1));let i=h("node_modules/typescript/bin/tsc");console.log(`\u2139\uFE0F  Running TypeScript check with config: ${r}`);let s="";try{return C(`${i} --noEmit --project ${r}`,{stdio:"pipe"}),{ok:!0,output:""}}catch(l){let f=l.stdout?.toString()??"",o=l.stderr?.toString()??"";return s=(f+o).trim()||l.message,{ok:!1,output:s}}}var k=r=>r.replace(/\\/g,"/");function x(r,t,i){let s=r.filter(n=>!i.some(e=>n.includes(k(e)))).filter(n=>n.trim()),l=/^(.*?)(?:\((\d+),(\d+)\))?: error TS(\d{4}): (.*)$/,f=n=>t.some(e=>k(n).includes(k(e))),o=[],c=[];for(let n of s){let e=l.exec(n);if(!e){c.push(n);continue}let a=e[1];if(f(a)){let p=Number(e[2]||0),g=Number(e[3]||0),d=e[4],u=e[5];o.push({file:a,line:p,col:g,code:d,msg:u})}else c.push(n)}return{whitelistedErrors:o,nonWhitelistedErrors:c}}function _(r){let t=new Map;for(let i of r)t.has(i.file)||t.set(i.file,[]),t.get(i.file).push(i);return t}function y(r){console.error(`\u274C ${r.length} TypeScript error(s) found in whitelisted files:`);let t=_(r),i=Array.from(t.keys()).sort(),s=[];for(let l of i){s.push(l);let f=t.get(l).sort((o,c)=>o.line-c.line||o.col-c.col);for(let o of f)s.push(`  (${o.line},${o.col}): error TS${o.code}: ${o.msg}`);s.push("")}console.error(s.join(`
`).trim())}function $(r){let t=(()=>{let o=new Set,c=/^(.*): error TS(\d{4})/;return n=>{let e=n.match(c);if(e){let a=`${e[1]}: error TS${e[2]}`;if(!o.has(a))return o.add(a),a}}})(),i=o=>{let c=n=>n.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"";return[...o].sort((n,e)=>c(n).localeCompare(c(e)))},s=o=>{let c=o.filter(Boolean),n=g=>g.match(/^(.*\/)? .*?: error TS\d{4}/)?.[1]||"",e=g=>g.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"",a="",p="";return c.reduce((g,d)=>{let u=n(d),T=e(d);return a&&u!==a?g.push("",""):p&&T!==p&&g.push(""),g.push(d),a=u,p=T,g},[])},l=r.map(t),f=l.filter(Boolean).length;if(f>0){let o=s(i(l.filter(Boolean)));console.log(o.join(`
`),`

`),console.log(`\u2139\uFE0F  Found ${f} TypeScript error(s) (excluding blacklisted files)`,`

`)}}function H(){let{whiteListPath:r,blackListPath:t,printFilesList:i,tsconfig:s}=w();console.log("\u2139\uFE0F  Loading configuration:"),console.log(`  - Whitelist: ${r}`),console.log(`  - Blacklist: ${t}`),console.log(`  - TypeScript config: ${s}`);let l=E(r),f=E(t);console.log(`\u2139\uFE0F  Loaded ${l.length} whitelist pattern(s), ${f.length} blacklist pattern(s)`);let{ok:o,output:c}=F(s);o&&(console.log("\u2705 No TypeScript errors."),process.exit(0));let n=c.split(`
`).filter(Boolean),{whitelistedErrors:e,nonWhitelistedErrors:a}=x(n,l,f);e.length>0&&(y(e),process.exit(1)),console.log(`\u2705 No TypeScript errors in whitelisted files.

`),i&&a.length>0&&$(a),process.exit(0)}H();
//# sourceMappingURL=cli.js.map