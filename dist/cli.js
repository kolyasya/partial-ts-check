#!/usr/bin/env node
import F from"path";import b from"fs";import{execSync as W}from"child_process";import{createRequire as v}from"module";var w=e=>e.replace(/\\/g,"/"),T=process.cwd(),A=v(F.join(T,"package.json"));function J(){let e=F.join(T,"package.json"),t=b.readFileSync(e,"utf8");return JSON.parse(t)}function B(...e){return F.join(T,...e)}function x(e){let t=B(e);if(!b.existsSync(t))throw new Error(`List file not found: ${e}`);if(t.endsWith(".js")||t.endsWith(".cjs")){let c=A(t);return c.default||c}let n=b.readFileSync(t,"utf8");try{return JSON.parse(n)}catch{return n.split(/\r?\n/).map(c=>c.trim()).filter(Boolean)}}function O(){let t=J().partialTsChecker||{};return{whiteListPath:t.whitelist||t.whiteList||"app/scripts/ts-whitelist.js",blackListPath:t.blacklist||t.blackList||"app/scripts/ts-blacklist.js",printFilesList:t.printFilesList??!0,tsconfig:t.tsconfig||"app/tsconfig.json"}}function R(e){let t=B("node_modules/typescript/bin/tsc"),n="";try{return W(`${t} --noEmit --project ${e}`,{stdio:"pipe"}),{ok:!0,output:""}}catch(c){let h=c.stdout?.toString()??"",k=c.stderr?.toString()??"";return n=(h+k).trim()||c.message,{ok:!1,output:n}}}function q(e){let t=new Map;for(let n of e)t.has(n.file)||t.set(n.file,[]),t.get(n.file).push(n);return t}function z(){let{whiteListPath:e,blackListPath:t,printFilesList:n,tsconfig:c}=O(),h=x(e),k=x(t),{ok:N,output:C}=R(c);N&&(console.log("\u2705 No TypeScript errors."),process.exit(0));let L=C.split(`
`).filter(Boolean).filter(o=>!k.some(s=>o.includes(w(s)))).filter(o=>o.trim()),E=/^(.*?)(?:\((\d+),(\d+)\))?: error TS(\d{4}): (.*)$/,P=o=>h.some(s=>w(o).includes(w(s))),m=[];for(let o of L){let s=E.exec(o);if(!s)continue;let l=s[1];if(!P(l))continue;let g=Number(s[2]||0),d=Number(s[3]||0),r=s[4],i=s[5];m.push({file:l,line:g,col:d,code:r,msg:i})}if(m.length>0){console.error(`\u274C ${m.length} TypeScript error(s) found in whitelisted files:`);let o=q(m),s=Array.from(o.keys()).sort(),l=[];for(let g of s){l.push(g);let d=o.get(g).sort((r,i)=>r.line-i.line||r.col-i.col);for(let r of d)l.push(`  (${r.line},${r.col}): error TS${r.code}: ${r.msg}`);l.push("")}console.error(l.join(`
`).trim()),process.exit(1)}if(console.log(`\u2705 No TypeScript errors in whitelisted files.

`),n&&L.length>0){let o=(()=>{let r=new Set,i=/^(.*): error TS(\d{4})/;return u=>{let f=u.match(i);if(f){let p=`${f[1]}: error TS${f[2]}`;if(!r.has(p))return r.add(p),p}}})(),s=r=>{let i=u=>u.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"";return[...r].sort((u,f)=>i(u).localeCompare(i(f)))},l=r=>{let i=r.filter(Boolean),u=a=>a.match(/^(.*\/)? .*?: error TS\d{4}/)?.[1]||"",f=a=>a.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"",p="",S="";return i.reduce((a,y)=>{let j=u(y),$=f(y);return p&&j!==p?a.push("",""):S&&$!==S&&a.push(""),a.push(y),p=j,S=$,a},[])},g=L.map(o),d=g.filter(Boolean).length;if(d>0){let r=l(s(g.filter(Boolean)));console.log(r.join(`
`),`

`),console.log(`\u2139\uFE0F  Found ${d} TypeScript error(s) (excluding blacklisted files)`,`

`)}}process.exit(0)}z();
//# sourceMappingURL=cli.js.map