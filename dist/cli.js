#!/usr/bin/env node
import $ from"path";import S from"fs";import{execSync as C}from"child_process";import{createRequire as _}from"module";var b=e=>e.replace(/\\/g,"/"),W="app/scripts/ts-whitelist.js",H="app/scripts/ts-blacklist.js",I="app/tsconfig.json",j=process.cwd(),O=_($.join(j,"package.json"));function R(){let e=$.join(j,"package.json"),t=S.readFileSync(e,"utf8");return JSON.parse(t)}function w(...e){return $.join(j,...e)}function P(e){let t=w(e);if(!S.existsSync(t))return console.log(`\u2139\uFE0F  List file not found: ${e} (will be ignored)`),[];if(t.endsWith(".js")||t.endsWith(".cjs")){let c=O(t);return c.default||c}let o=S.readFileSync(t,"utf8");try{return JSON.parse(o)}catch{return o.split(/\r?\n/).map(c=>c.trim()).filter(Boolean)}}function v(){let t=R()["partial-ts-checker"]||{};return{whiteListPath:t.whitelist||t.whiteList||W,blackListPath:t.blacklist||t.blackList||H,printFilesList:t.printFilesList??!0,tsconfig:t.tsconfig||I}}function D(e){let t=w(e);S.existsSync(t)||(console.error(`\u274C TypeScript config file not found: ${e}`),process.exit(1));let o=w("node_modules/typescript/bin/tsc");console.log(`\u2139\uFE0F  Running TypeScript check with config: ${e}`);let c="";try{return C(`${o} --noEmit --project ${e}`,{stdio:"pipe"}),{ok:!0,output:""}}catch(d){let m=d.stdout?.toString()??"",k=d.stderr?.toString()??"";return c=(m+k).trim()||d.message,{ok:!1,output:c}}}function J(e){let t=new Map;for(let o of e)t.has(o.file)||t.set(o.file,[]),t.get(o.file).push(o);return t}function U(){let{whiteListPath:e,blackListPath:t,printFilesList:o,tsconfig:c}=v();console.log("\u2139\uFE0F  Loading configuration:"),console.log(`  - Whitelist: ${e}`),console.log(`  - Blacklist: ${t}`),console.log(`  - TypeScript config: ${c}`);let d=P(e),m=P(t);console.log(`\u2139\uFE0F  Loaded ${d.length} whitelist pattern(s), ${m.length} blacklist pattern(s)`);let{ok:k,output:A}=D(c);k&&(console.log("\u2705 No TypeScript errors."),process.exit(0));let y=A.split(`
`).filter(Boolean).filter(n=>!m.some(r=>n.includes(b(r)))).filter(n=>n.trim()),E=/^(.*?)(?:\((\d+),(\d+)\))?: error TS(\d{4}): (.*)$/,N=n=>d.some(r=>b(n).includes(b(r))),L=[];for(let n of y){let r=E.exec(n);if(!r)continue;let l=r[1];if(!N(l))continue;let a=Number(r[2]||0),h=Number(r[3]||0),s=r[4],i=r[5];L.push({file:l,line:a,col:h,code:s,msg:i})}if(L.length>0){console.error(`\u274C ${L.length} TypeScript error(s) found in whitelisted files:`);let n=J(L),r=Array.from(n.keys()).sort(),l=[];for(let a of r){l.push(a);let h=n.get(a).sort((s,i)=>s.line-i.line||s.col-i.col);for(let s of h)l.push(`  (${s.line},${s.col}): error TS${s.code}: ${s.msg}`);l.push("")}console.error(l.join(`
`).trim()),process.exit(1)}if(console.log(`\u2705 No TypeScript errors in whitelisted files.

`),o&&y.length>0){let n=(()=>{let s=new Set,i=/^(.*): error TS(\d{4})/;return p=>{let u=p.match(i);if(u){let f=`${u[1]}: error TS${u[2]}`;if(!s.has(f))return s.add(f),f}}})(),r=s=>{let i=p=>p.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"";return[...s].sort((p,u)=>i(p).localeCompare(i(u)))},l=s=>{let i=s.filter(Boolean),p=g=>g.match(/^(.*\/)? .*?: error TS\d{4}/)?.[1]||"",u=g=>g.match(/^(.*?)(\(\d+,\d+\))?: error TS\d{4}/)?.[1]||"",f="",T="";return i.reduce((g,F)=>{let x=p(F),B=u(F);return f&&x!==f?g.push("",""):T&&B!==T&&g.push(""),g.push(F),f=x,T=B,g},[])},a=y.map(n),h=a.filter(Boolean).length;if(h>0){let s=l(r(a.filter(Boolean)));console.log(s.join(`
`),`

`),console.log(`\u2139\uFE0F  Found ${h} TypeScript error(s) (excluding blacklisted files)`,`

`)}}process.exit(0)}U();
//# sourceMappingURL=cli.js.map